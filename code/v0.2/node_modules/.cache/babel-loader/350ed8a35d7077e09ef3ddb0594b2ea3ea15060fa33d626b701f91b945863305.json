{"ast":null,"code":"var _jsxFileName = \"F:\\\\Apps\\\\hypercloud-github\\\\PropDial\\\\code\\\\v0.2\\\\src\\\\Components\\\\CircularProgressBar.jsx\",\n  _s = $RefreshSig$();\nimport { styled } from \"@mui/joy\";\nimport React, { useEffect, useState } from \"react\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport ScrollTrigger from \"react-scroll-trigger\";\n\n// style\nimport \"./CircularProgressBar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CircularProgressBar() {\n  _s();\n  const [percentage, setPercentage] = useState(0);\n  const [counterOn, setCounterOn] = useState(false);\n  useEffect(() => {\n    const increasePercentage = () => {\n      if (percentage < 70) {\n        setPercentage(prevPercentage => prevPercentage + 1);\n      }\n    };\n\n    // If counterOn is true, start increasing the percentage\n    if (counterOn && percentage < 60) {\n      const interval = setInterval(increasePercentage, 40);\n\n      // Clean up interval on unmount or when counterOn becomes false\n      return () => clearInterval(interval);\n    }\n  }, [counterOn, percentage]);\n  const handleScrollEnter = () => {\n    // Reset the percentage to 0 when the user enters the section\n    setPercentage(0);\n    setCounterOn(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress_parent\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScrollTrigger, {\n      onEnter: handleScrollEnter // Call handleScrollEnter when the section is in view\n      ,\n      onExit: () => setCounterOn(false) // Stop the counter when the section is out of view\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"parent_scroll\",\n          children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n            value: percentage,\n            text: `${percentage}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(CircularProgressBar, \"DYUvHSBGQeBM/r8hOevs7K64dUE=\");\n_c = CircularProgressBar;\nexport default CircularProgressBar;\nvar _c;\n$RefreshReg$(_c, \"CircularProgressBar\");","map":{"version":3,"names":["styled","React","useEffect","useState","CircularProgressbar","ScrollTrigger","jsxDEV","_jsxDEV","Fragment","_Fragment","CircularProgressBar","_s","percentage","setPercentage","counterOn","setCounterOn","increasePercentage","prevPercentage","interval","setInterval","clearInterval","handleScrollEnter","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onEnter","onExit","style","textAlign","value","text","_c","$RefreshReg$"],"sources":["F:/Apps/hypercloud-github/PropDial/code/v0.2/src/Components/CircularProgressBar.jsx"],"sourcesContent":["import { styled } from \"@mui/joy\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport ScrollTrigger from \"react-scroll-trigger\";\r\n\r\n// style\r\nimport \"./CircularProgressBar.css\";\r\n\r\nfunction CircularProgressBar() {\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [counterOn, setCounterOn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const increasePercentage = () => {\r\n      if (percentage < 70) {\r\n        setPercentage((prevPercentage) => prevPercentage + 1);\r\n      }\r\n    };\r\n\r\n    // If counterOn is true, start increasing the percentage\r\n    if (counterOn && percentage < 60) {\r\n      const interval = setInterval(increasePercentage, 40);\r\n\r\n      // Clean up interval on unmount or when counterOn becomes false\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [counterOn, percentage]);\r\n\r\n  const handleScrollEnter = () => {\r\n    // Reset the percentage to 0 when the user enters the section\r\n    setPercentage(0);\r\n    setCounterOn(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"progress_parent\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ScrollTrigger\r\n        onEnter={handleScrollEnter} // Call handleScrollEnter when the section is in view\r\n        onExit={() => setCounterOn(false)} // Stop the counter when the section is out of view\r\n      >\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <div className=\"parent_scroll\">\r\n            <CircularProgressbar value={percentage} text={`${percentage}%`} />\r\n          </div>\r\n        </div>\r\n      </ScrollTrigger>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CircularProgressBar;\r\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,mBAAmB,QAAQ,4BAA4B;AAChE,OAAO,4CAA4C;AACnD,OAAOC,aAAa,MAAM,sBAAsB;;AAEhD;AACA,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnC,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd,MAAMc,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,IAAIJ,UAAU,GAAG,EAAE,EAAE;QACnBC,aAAa,CAAEI,cAAc,IAAKA,cAAc,GAAG,CAAC,CAAC;MACvD;IACF,CAAC;;IAED;IACA,IAAIH,SAAS,IAAIF,UAAU,GAAG,EAAE,EAAE;MAChC,MAAMM,QAAQ,GAAGC,WAAW,CAACH,kBAAkB,EAAE,EAAE,CAAC;;MAEpD;MACA,OAAO,MAAMI,aAAa,CAACF,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACJ,SAAS,EAAEF,UAAU,CAAC,CAAC;EAE3B,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACAR,aAAa,CAAC,CAAC,CAAC;IAChBE,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,oBACER,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACEf,OAAA;MAAKgB,SAAS,EAAC,iBAAiB;MAAAD,QAAA,eAC9Bf,OAAA;QAAKgB,SAAS,EAAC,WAAW;QAAAD,QAAA,eACxBf,OAAA;UAAKgB,SAAS,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAEd;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF,eAENpB,OAAA,CAACF,aAAa;MACZuB,OAAO,EAAEP,iBAAkB,CAAC;MAAA;MAC5BQ,MAAM,EAAEA,CAAA,KAAMd,YAAY,CAAC,KAAK,CAAE,CAAC;MAAA;MAAAO,QAAA,eAEnCf,OAAA;QAAKuB,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAT,QAAA,eAClCf,OAAA;UAAKgB,SAAS,EAAC,eAAe;UAAAD,QAAA,eAC5Bf,OAAA,CAACH,mBAAmB;YAAC4B,KAAK,EAAEpB,UAAW;YAACqB,IAAI,EAAG,GAAErB,UAAW;UAAG;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAG;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAC9D;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACQ;EAAA,gBACf;AAEP;AAAChB,EAAA,CAhDQD,mBAAmB;AAAAwB,EAAA,GAAnBxB,mBAAmB;AAkD5B,eAAeA,mBAAmB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}