{"ast":null,"code":"var _jsxFileName = \"F:\\\\Apps\\\\hypercloud-github\\\\PropDial\\\\code\\\\v0.2\\\\src\\\\Components\\\\CircularProgressBar.jsx\",\n  _s = $RefreshSig$();\nimport { styled } from \"@mui/joy\";\nimport React, { useEffect, useState } from \"react\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport CountUp from \"react-countup\";\nimport ScrollTrigger from \"react-scroll-trigger\";\n\n// style\nimport \"./CircularProgressbar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CircularProgressBar() {\n  _s();\n  const [percentage, setPercentage] = useState(0);\n  const [counterOn, setCounterOn] = useState(false);\n  useEffect(() => {\n    const increasePercentage = () => {\n      if (percentage < 70) {\n        setPercentage(prevPercentage => prevPercentage + 1);\n      }\n    };\n\n    // If counterOn is true, start increasing the percentage\n    if (counterOn && percentage < 30) {\n      const interval = setInterval(increasePercentage, 50);\n\n      // Clean up interval on unmount or when counterOn becomes false\n      return () => clearInterval(interval);\n    }\n  }, [counterOn, percentage]);\n  const handleScrollEnter = () => {\n    // Reset the percentage to 0 when the user enters the section\n    setPercentage(0);\n    setCounterOn(true);\n  };\n  return /*#__PURE__*/_jsxDEV(ScrollTrigger, {\n    onEnter: handleScrollEnter // Call handleScrollEnter when the section is in view\n    ,\n    onExit: () => setCounterOn(false) // Stop the counter when the section is out of view\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parent_scroll\",\n        children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n          value: percentage,\n          text: `${percentage}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(CircularProgressBar, \"DYUvHSBGQeBM/r8hOevs7K64dUE=\");\n_c = CircularProgressBar;\nexport default CircularProgressBar;\nvar _c;\n$RefreshReg$(_c, \"CircularProgressBar\");","map":{"version":3,"names":["styled","React","useEffect","useState","CircularProgressbar","CountUp","ScrollTrigger","jsxDEV","_jsxDEV","CircularProgressBar","_s","percentage","setPercentage","counterOn","setCounterOn","increasePercentage","prevPercentage","interval","setInterval","clearInterval","handleScrollEnter","onEnter","onExit","children","style","textAlign","className","value","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Apps/hypercloud-github/PropDial/code/v0.2/src/Components/CircularProgressBar.jsx"],"sourcesContent":["import { styled } from \"@mui/joy\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport CountUp from \"react-countup\";\r\nimport ScrollTrigger from \"react-scroll-trigger\";\r\n\r\n// style\r\nimport \"./CircularProgressbar.css\";\r\n\r\nfunction CircularProgressBar() {\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [counterOn, setCounterOn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const increasePercentage = () => {\r\n      if (percentage < 70) {\r\n        setPercentage((prevPercentage) => prevPercentage + 1);\r\n      }\r\n    };\r\n\r\n    // If counterOn is true, start increasing the percentage\r\n    if (counterOn && percentage < 30) {\r\n      const interval = setInterval(increasePercentage, 50);\r\n\r\n      // Clean up interval on unmount or when counterOn becomes false\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [counterOn, percentage]);\r\n\r\n  const handleScrollEnter = () => {\r\n    // Reset the percentage to 0 when the user enters the section\r\n    setPercentage(0);\r\n    setCounterOn(true);\r\n  };\r\n\r\n  return (\r\n    <ScrollTrigger\r\n      onEnter={handleScrollEnter} // Call handleScrollEnter when the section is in view\r\n      onExit={() => setCounterOn(false)} // Stop the counter when the section is out of view\r\n    >\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <div className=\"parent_scroll\">\r\n          <CircularProgressbar value={percentage} text={`${percentage}%`} />\r\n        </div>\r\n      </div>\r\n    </ScrollTrigger>\r\n  );\r\n}\r\n\r\nexport default CircularProgressBar;\r\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,mBAAmB,QAAQ,4BAA4B;AAChE,OAAO,4CAA4C;AACnD,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,aAAa,MAAM,sBAAsB;;AAEhD;AACA,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd,MAAMa,kBAAkB,GAAGA,CAAA,KAAM;MAC/B,IAAIJ,UAAU,GAAG,EAAE,EAAE;QACnBC,aAAa,CAAEI,cAAc,IAAKA,cAAc,GAAG,CAAC,CAAC;MACvD;IACF,CAAC;;IAED;IACA,IAAIH,SAAS,IAAIF,UAAU,GAAG,EAAE,EAAE;MAChC,MAAMM,QAAQ,GAAGC,WAAW,CAACH,kBAAkB,EAAE,EAAE,CAAC;;MAEpD;MACA,OAAO,MAAMI,aAAa,CAACF,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACJ,SAAS,EAAEF,UAAU,CAAC,CAAC;EAE3B,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACAR,aAAa,CAAC,CAAC,CAAC;IAChBE,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,oBACEN,OAAA,CAACF,aAAa;IACZe,OAAO,EAAED,iBAAkB,CAAC;IAAA;IAC5BE,MAAM,EAAEA,CAAA,KAAMR,YAAY,CAAC,KAAK,CAAE,CAAC;IAAA;IAAAS,QAAA,eAEnCf,OAAA;MAAKgB,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,eAClCf,OAAA;QAAKkB,SAAS,EAAC,eAAe;QAAAH,QAAA,eAC5Bf,OAAA,CAACJ,mBAAmB;UAACuB,KAAK,EAAEhB,UAAW;UAACiB,IAAI,EAAG,GAAEjB,UAAW;QAAG;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC9D;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACQ;AAEpB;AAACtB,EAAA,CAtCQD,mBAAmB;AAAAwB,EAAA,GAAnBxB,mBAAmB;AAwC5B,eAAeA,mBAAmB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}