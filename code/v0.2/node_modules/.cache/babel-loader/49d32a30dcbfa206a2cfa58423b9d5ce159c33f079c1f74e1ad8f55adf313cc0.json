{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport Resizer from \"react-image-file-resizer\";\nexport const useImageUpload = () => {\n  _s();\n  const [isCancelled, setIsCancelled] = useState(false);\n  const [error, setError] = useState(null);\n  const [isImgCompressPending, setIsPending] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n  const [imgCompressedFile, setImgCompressedFile] = useState(null);\n  const imgUpload = async (imgFile, imgWidth, imgHeight) => {\n    setError(null);\n    setIsPending(true);\n\n    // console.log('Image Width: ', imgWidth)\n    // console.log('Image Height: ', imgHeight)\n\n    const resizeFile = (file, width, height) => new Promise(resolve => {\n      Resizer.imageFileResizer(file, width, height, \"JPEG\", 80, 0, uri => {\n        resolve(uri);\n      }, \"base64\");\n    });\n    const dataURIToBlob = async dataURI => {\n      const splitDataURI = dataURI.split(\",\");\n      const byteString = splitDataURI[0].indexOf(\"base64\") >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1]);\n      const mimeString = splitDataURI[0].split(\":\")[1].split(\";\")[0];\n      const ia = new Uint8Array(byteString.length);\n      for (let i = 0; i < byteString.length; i++) ia[i] = byteString.charCodeAt(i);\n      return new Blob([ia], {\n        type: mimeString\n      });\n    };\n    try {\n      const image = await resizeFile(imgFile, imgWidth, imgHeight);\n      // console.log('image resize', image);\n      const imgcompressed = dataURIToBlob(image);\n      // console.log('imgcompressed : ', imgcompressed)\n      // console.log('imgcompressed size : ', (await imgcompressed).size)\n\n      // update state\n      if (!isCancelled) {\n        setIsPending(false);\n        setError(null);\n      }\n      return imgcompressed;\n    } catch (err) {\n      if (!isCancelled) {\n        setError(err.message);\n        setIsPending(false);\n      }\n      setError(err.message);\n      console.log(err.message);\n    }\n  };\n  useEffect(() => {\n    return () => setIsCancelled(true);\n  }, []);\n  return {\n    imgUpload,\n    error,\n    isImgCompressPending,\n    imgCompressedFile\n  };\n};\n_s(useImageUpload, \"dDu1CvLl47IPvX5DCDOS9WN40Xg=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useEffect","useState","useAuthContext","Resizer","useImageUpload","_s","isCancelled","setIsCancelled","error","setError","isImgCompressPending","setIsPending","dispatch","imgCompressedFile","setImgCompressedFile","imgUpload","imgFile","imgWidth","imgHeight","resizeFile","file","width","height","Promise","resolve","imageFileResizer","uri","dataURIToBlob","dataURI","splitDataURI","split","byteString","indexOf","atob","decodeURI","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","image","imgcompressed","err","message","console","log"],"sources":["F:/Apps/hypercloud-github/PropDial/code/v0.2/src/hooks/useImageUpload.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useAuthContext } from './useAuthContext'\r\nimport Resizer from \"react-image-file-resizer\";\r\n\r\nexport const useImageUpload = () => {\r\n\r\n    const [isCancelled, setIsCancelled] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [isImgCompressPending, setIsPending] = useState(false)\r\n    const { dispatch } = useAuthContext()\r\n    const [imgCompressedFile, setImgCompressedFile] = useState(null);\r\n\r\n    const imgUpload = async (imgFile, imgWidth, imgHeight) => {\r\n        setError(null)\r\n        setIsPending(true)\r\n\r\n        // console.log('Image Width: ', imgWidth)\r\n        // console.log('Image Height: ', imgHeight)\r\n\r\n        const resizeFile = (file, width, height) =>\r\n            new Promise((resolve) => {\r\n                Resizer.imageFileResizer(\r\n                    file,\r\n                    width,\r\n                    height,\r\n                    \"JPEG\",\r\n                    80,\r\n                    0,\r\n                    (uri) => {\r\n                        resolve(uri);\r\n                    },\r\n                    \"base64\"\r\n                );\r\n            });\r\n\r\n        const dataURIToBlob = async (dataURI) => {\r\n            const splitDataURI = dataURI.split(\",\");\r\n            const byteString =\r\n                splitDataURI[0].indexOf(\"base64\") >= 0\r\n                    ? atob(splitDataURI[1])\r\n                    : decodeURI(splitDataURI[1]);\r\n            const mimeString = splitDataURI[0].split(\":\")[1].split(\";\")[0];\r\n            const ia = new Uint8Array(byteString.length);\r\n            for (let i = 0; i < byteString.length; i++) ia[i] = byteString.charCodeAt(i);\r\n            return new Blob([ia], { type: mimeString });\r\n        };\r\n\r\n        try {\r\n\r\n            const image = await resizeFile(imgFile, imgWidth, imgHeight);\r\n            // console.log('image resize', image);\r\n            const imgcompressed = dataURIToBlob(image);\r\n            // console.log('imgcompressed : ', imgcompressed)\r\n            // console.log('imgcompressed size : ', (await imgcompressed).size)\r\n\r\n            // update state\r\n            if (!isCancelled) {\r\n                setIsPending(false)\r\n                setError(null)\r\n            }\r\n\r\n            return imgcompressed;\r\n        }\r\n        catch (err) {\r\n            if (!isCancelled) {\r\n                setError(err.message)\r\n                setIsPending(false)\r\n            }\r\n            setError(err.message)\r\n            console.log(err.message)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => setIsCancelled(true)\r\n    }, [])\r\n\r\n    return { imgUpload, error, isImgCompressPending, imgCompressedFile }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}