{"ast":null,"code":"var _jsxFileName = \"F:\\\\Apps\\\\hypercloud-github\\\\PropDial\\\\code\\\\v0.2\\\\src\\\\Components\\\\CircleProgressBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./CircleProgressBar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CircleProgressBar = _ref => {\n  _s();\n  let {\n    percentage\n  } = _ref;\n  const [isVisible, setIsVisible] = useState(false);\n  const circleRef = useRef(null);\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 0.5 // Adjust this threshold as per your needs\n    };\n\n    const callback = entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      });\n    };\n    const observer = new IntersectionObserver(callback, options);\n    if (circleRef.current) {\n      observer.observe(circleRef.current);\n    }\n\n    // Clean up the observer\n    return () => {\n      observer.unobserve(circleRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: circleRef,\n    className: `circle-progress-bar ${isVisible ? \"visible\" : \"\"}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(CircleProgressBar, \"Ic46GnJ1mMv0gTldB0YPoc/vjLQ=\");\n_c = CircleProgressBar;\nexport default CircleProgressBar;\nvar _c;\n$RefreshReg$(_c, \"CircleProgressBar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","CircleProgressBar","_ref","_s","percentage","isVisible","setIsVisible","circleRef","options","root","rootMargin","threshold","callback","entries","forEach","entry","isIntersecting","observer","IntersectionObserver","current","observe","unobserve","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Apps/hypercloud-github/PropDial/code/v0.2/src/Components/CircleProgressBar.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./CircleProgressBar.css\";\r\n\r\nconst CircleProgressBar = ({ percentage }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const circleRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold: 0.5, // Adjust this threshold as per your needs\r\n    };\r\n\r\n    const callback = (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          setIsVisible(true);\r\n        }\r\n      });\r\n    };\r\n\r\n    const observer = new IntersectionObserver(callback, options);\r\n    if (circleRef.current) {\r\n      observer.observe(circleRef.current);\r\n    }\r\n\r\n    // Clean up the observer\r\n    return () => {\r\n      observer.unobserve(circleRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={circleRef}\r\n      className={`circle-progress-bar ${isVisible ? \"visible\" : \"\"}`}\r\n    >\r\n      {/* Same as before */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircleProgressBar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,iBAAiB,GAAGC,IAAA,IAAoB;EAAAC,EAAA;EAAA,IAAnB;IAAEC;EAAW,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMW,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMW,OAAO,GAAG;MACdC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,GAAG,CAAE;IAClB,CAAC;;IAED,MAAMC,QAAQ,GAAIC,OAAO,IAAK;MAC5BA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACzB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxBV,YAAY,CAAC,IAAI,CAAC;QACpB;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMW,QAAQ,GAAG,IAAIC,oBAAoB,CAACN,QAAQ,EAAEJ,OAAO,CAAC;IAC5D,IAAID,SAAS,CAACY,OAAO,EAAE;MACrBF,QAAQ,CAACG,OAAO,CAACb,SAAS,CAACY,OAAO,CAAC;IACrC;;IAEA;IACA,OAAO,MAAM;MACXF,QAAQ,CAACI,SAAS,CAACd,SAAS,CAACY,OAAO,CAAC;IACvC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA;IACEsB,GAAG,EAAEf,SAAU;IACfgB,SAAS,EAAG,uBAAsBlB,SAAS,GAAG,SAAS,GAAG,EAAG;EAAE;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAG3D;AAEV,CAAC;AAACxB,EAAA,CAtCIF,iBAAiB;AAAA2B,EAAA,GAAjB3B,iBAAiB;AAwCvB,eAAeA,iBAAiB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}