{"ast":null,"code":"var _jsxFileName = \"F:\\\\Apps\\\\hypercloud-github\\\\PropDial\\\\code\\\\v0.2\\\\src\\\\Components\\\\CircularProgressBar.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CircularProgressBar() {\n  _s();\n  const [percentage, setPercentage] = useState(0);\n  const triggerRef = useRef(null);\n  useEffect(() => {\n    const handleScrollIn = () => {\n      // Start increasing the progress bar percentage when it comes into view\n      const interval = setInterval(() => {\n        setPercentage(prevPercentage => {\n          if (prevPercentage < 50) {\n            return prevPercentage + 1;\n          } else {\n            clearInterval(interval);\n            return prevPercentage;\n          }\n        });\n      }, 50);\n    };\n\n    // Clean up the interval when the element is out of view\n    const handleScrollOut = () => {\n      setPercentage(0);\n    };\n\n    // Register event listeners\n    ScrollTrigger.addEventListener(handleScrollIn);\n    ScrollTrigger.addEventListener(handleScrollOut);\n\n    // Clean up event listeners on unmount\n    return () => {\n      ScrollTrigger.removeEventListener(handleScrollIn);\n      ScrollTrigger.removeEventListener(handleScrollOut);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ScrollTrigger, {\n    ref: triggerRef,\n    onEnter: () => console.log(\"Enter\"),\n    onExit: () => console.log(\"Exit\"),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Circular progress bar in React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 150,\n          marginLeft: 550\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n          value: percentage,\n          text: `${percentage}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(CircularProgressBar, \"3KBLx1d1ueEQ2T6466LYtD9ShaY=\");\n_c = CircularProgressBar;\nvar _c;\n$RefreshReg$(_c, \"CircularProgressBar\");","map":{"version":3,"names":["CircularProgressBar","_s","percentage","setPercentage","useState","triggerRef","useRef","useEffect","handleScrollIn","interval","setInterval","prevPercentage","clearInterval","handleScrollOut","ScrollTrigger","addEventListener","removeEventListener","_jsxDEV","ref","onEnter","console","log","onExit","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","width","marginLeft","CircularProgressbar","value","text","_c","$RefreshReg$"],"sources":["F:/Apps/hypercloud-github/PropDial/code/v0.2/src/Components/CircularProgressBar.jsx"],"sourcesContent":["function CircularProgressBar() {\r\n  const [percentage, setPercentage] = useState(0);\r\n  const triggerRef = useRef(null);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const handleScrollIn = () => {\r\n      // Start increasing the progress bar percentage when it comes into view\r\n      const interval = setInterval(() => {\r\n        setPercentage((prevPercentage) => {\r\n          if (prevPercentage < 50) {\r\n            return prevPercentage + 1;\r\n          } else {\r\n            clearInterval(interval);\r\n            return prevPercentage;\r\n          }\r\n        });\r\n      }, 50);\r\n    };\r\n\r\n    // Clean up the interval when the element is out of view\r\n    const handleScrollOut = () => {\r\n      setPercentage(0);\r\n    };\r\n\r\n    // Register event listeners\r\n    ScrollTrigger.addEventListener(handleScrollIn);\r\n    ScrollTrigger.addEventListener(handleScrollOut);\r\n\r\n    // Clean up event listeners on unmount\r\n    return () => {\r\n      ScrollTrigger.removeEventListener(handleScrollIn);\r\n      ScrollTrigger.removeEventListener(handleScrollOut);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <ScrollTrigger\r\n      ref={triggerRef}\r\n      onEnter={() => console.log(\"Enter\")}\r\n      onExit={() => console.log(\"Exit\")}\r\n    >\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h4>Circular progress bar in React</h4>\r\n        <div style={{ width: 150, marginLeft: 550 }}>\r\n          <CircularProgressbar value={percentage} text={`${percentage}%`} />\r\n        </div>\r\n      </div>\r\n    </ScrollTrigger>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,SAASA,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAMC,UAAU,GAAGC,MAAM,CAAC,IAAI,CAAC;EAI/BC,SAAS,CAAC,MAAM;IACd,MAAMC,cAAc,GAAGA,CAAA,KAAM;MAC3B;MACA,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCP,aAAa,CAAEQ,cAAc,IAAK;UAChC,IAAIA,cAAc,GAAG,EAAE,EAAE;YACvB,OAAOA,cAAc,GAAG,CAAC;UAC3B,CAAC,MAAM;YACLC,aAAa,CAACH,QAAQ,CAAC;YACvB,OAAOE,cAAc;UACvB;QACF,CAAC,CAAC;MACJ,CAAC,EAAE,EAAE,CAAC;IACR,CAAC;;IAED;IACA,MAAME,eAAe,GAAGA,CAAA,KAAM;MAC5BV,aAAa,CAAC,CAAC,CAAC;IAClB,CAAC;;IAED;IACAW,aAAa,CAACC,gBAAgB,CAACP,cAAc,CAAC;IAC9CM,aAAa,CAACC,gBAAgB,CAACF,eAAe,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXC,aAAa,CAACE,mBAAmB,CAACR,cAAc,CAAC;MACjDM,aAAa,CAACE,mBAAmB,CAACH,eAAe,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEI,OAAA,CAACH,aAAa;IACZI,GAAG,EAAEb,UAAW;IAChBc,OAAO,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAE;IACpCC,MAAM,EAAEA,CAAA,KAAMF,OAAO,CAACC,GAAG,CAAC,MAAM,CAAE;IAAAE,QAAA,eAElCN,OAAA;MAAKO,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,gBAClCN,OAAA;QAAAM,QAAA,EAAI;MAA8B;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACvCZ,OAAA;QAAKO,KAAK,EAAE;UAAEM,KAAK,EAAE,GAAG;UAAEC,UAAU,EAAE;QAAI,CAAE;QAAAR,QAAA,eAC1CN,OAAA,CAACe,mBAAmB;UAACC,KAAK,EAAE/B,UAAW;UAACgC,IAAI,EAAG,GAAEhC,UAAW;QAAG;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACQ;AAEpB;AAAC5B,EAAA,CAnDQD,mBAAmB;AAAAmC,EAAA,GAAnBnC,mBAAmB;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}